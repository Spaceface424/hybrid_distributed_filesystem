// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: shared/pingack.proto

package shared

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Introducer_RequestMembershipInfo_FullMethodName = "/Introducer/RequestMembershipInfo"
	Introducer_SWIMcmd_FullMethodName               = "/Introducer/SWIMcmd"
)

// IntroducerClient is the client API for Introducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntroducerClient interface {
	RequestMembershipInfo(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*MemberContainer, error)
	SWIMcmd(ctx context.Context, in *SWIMIn, opts ...grpc.CallOption) (*SWIMOut, error)
}

type introducerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntroducerClient(cc grpc.ClientConnInterface) IntroducerClient {
	return &introducerClient{cc}
}

func (c *introducerClient) RequestMembershipInfo(ctx context.Context, in *MemberInfo, opts ...grpc.CallOption) (*MemberContainer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberContainer)
	err := c.cc.Invoke(ctx, Introducer_RequestMembershipInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introducerClient) SWIMcmd(ctx context.Context, in *SWIMIn, opts ...grpc.CallOption) (*SWIMOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SWIMOut)
	err := c.cc.Invoke(ctx, Introducer_SWIMcmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntroducerServer is the server API for Introducer service.
// All implementations must embed UnimplementedIntroducerServer
// for forward compatibility.
type IntroducerServer interface {
	RequestMembershipInfo(context.Context, *MemberInfo) (*MemberContainer, error)
	SWIMcmd(context.Context, *SWIMIn) (*SWIMOut, error)
	mustEmbedUnimplementedIntroducerServer()
}

// UnimplementedIntroducerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntroducerServer struct{}

func (UnimplementedIntroducerServer) RequestMembershipInfo(context.Context, *MemberInfo) (*MemberContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestMembershipInfo not implemented")
}
func (UnimplementedIntroducerServer) SWIMcmd(context.Context, *SWIMIn) (*SWIMOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SWIMcmd not implemented")
}
func (UnimplementedIntroducerServer) mustEmbedUnimplementedIntroducerServer() {}
func (UnimplementedIntroducerServer) testEmbeddedByValue()                    {}

// UnsafeIntroducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntroducerServer will
// result in compilation errors.
type UnsafeIntroducerServer interface {
	mustEmbedUnimplementedIntroducerServer()
}

func RegisterIntroducerServer(s grpc.ServiceRegistrar, srv IntroducerServer) {
	// If the following call pancis, it indicates UnimplementedIntroducerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Introducer_ServiceDesc, srv)
}

func _Introducer_RequestMembershipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroducerServer).RequestMembershipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Introducer_RequestMembershipInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroducerServer).RequestMembershipInfo(ctx, req.(*MemberInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Introducer_SWIMcmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SWIMIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroducerServer).SWIMcmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Introducer_SWIMcmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroducerServer).SWIMcmd(ctx, req.(*SWIMIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Introducer_ServiceDesc is the grpc.ServiceDesc for Introducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Introducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Introducer",
	HandlerType: (*IntroducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestMembershipInfo",
			Handler:    _Introducer_RequestMembershipInfo_Handler,
		},
		{
			MethodName: "SWIMcmd",
			Handler:    _Introducer_SWIMcmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/pingack.proto",
}
