// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: hydfs/repl/repl.proto

package repl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Replication_RequestAsk_FullMethodName           = "/Replication/RequestAsk"
	Replication_RequestSend_FullMethodName          = "/Replication/RequestSend"
	Replication_RequestCreate_FullMethodName        = "/Replication/RequestCreate"
	Replication_RequestReplicaCreate_FullMethodName = "/Replication/RequestReplicaCreate"
	Replication_RequestGet_FullMethodName           = "/Replication/RequestGet"
	Replication_RequestAppend_FullMethodName        = "/Replication/RequestAppend"
)

// ReplicationClient is the client API for Replication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationClient interface {
	RequestAsk(ctx context.Context, in *RequestFiles, opts ...grpc.CallOption) (*RequestMissing, error)
	RequestSend(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*RequestAck, error)
	RequestCreate(ctx context.Context, in *CreateData, opts ...grpc.CallOption) (*RequestAck, error)
	RequestReplicaCreate(ctx context.Context, in *CreateData, opts ...grpc.CallOption) (*RequestAck, error)
	RequestGet(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*File, error)
	RequestAppend(ctx context.Context, in *AppendData, opts ...grpc.CallOption) (*RequestAck, error)
}

type replicationClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationClient(cc grpc.ClientConnInterface) ReplicationClient {
	return &replicationClient{cc}
}

func (c *replicationClient) RequestAsk(ctx context.Context, in *RequestFiles, opts ...grpc.CallOption) (*RequestMissing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestMissing)
	err := c.cc.Invoke(ctx, Replication_RequestAsk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RequestSend(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*RequestAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAck)
	err := c.cc.Invoke(ctx, Replication_RequestSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RequestCreate(ctx context.Context, in *CreateData, opts ...grpc.CallOption) (*RequestAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAck)
	err := c.cc.Invoke(ctx, Replication_RequestCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RequestReplicaCreate(ctx context.Context, in *CreateData, opts ...grpc.CallOption) (*RequestAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAck)
	err := c.cc.Invoke(ctx, Replication_RequestReplicaCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RequestGet(ctx context.Context, in *GetData, opts ...grpc.CallOption) (*File, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(File)
	err := c.cc.Invoke(ctx, Replication_RequestGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationClient) RequestAppend(ctx context.Context, in *AppendData, opts ...grpc.CallOption) (*RequestAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestAck)
	err := c.cc.Invoke(ctx, Replication_RequestAppend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServer is the server API for Replication service.
// All implementations must embed UnimplementedReplicationServer
// for forward compatibility.
type ReplicationServer interface {
	RequestAsk(context.Context, *RequestFiles) (*RequestMissing, error)
	RequestSend(context.Context, *RequestData) (*RequestAck, error)
	RequestCreate(context.Context, *CreateData) (*RequestAck, error)
	RequestReplicaCreate(context.Context, *CreateData) (*RequestAck, error)
	RequestGet(context.Context, *GetData) (*File, error)
	RequestAppend(context.Context, *AppendData) (*RequestAck, error)
	mustEmbedUnimplementedReplicationServer()
}

// UnimplementedReplicationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReplicationServer struct{}

func (UnimplementedReplicationServer) RequestAsk(context.Context, *RequestFiles) (*RequestMissing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAsk not implemented")
}
func (UnimplementedReplicationServer) RequestSend(context.Context, *RequestData) (*RequestAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSend not implemented")
}
func (UnimplementedReplicationServer) RequestCreate(context.Context, *CreateData) (*RequestAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCreate not implemented")
}
func (UnimplementedReplicationServer) RequestReplicaCreate(context.Context, *CreateData) (*RequestAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestReplicaCreate not implemented")
}
func (UnimplementedReplicationServer) RequestGet(context.Context, *GetData) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGet not implemented")
}
func (UnimplementedReplicationServer) RequestAppend(context.Context, *AppendData) (*RequestAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAppend not implemented")
}
func (UnimplementedReplicationServer) mustEmbedUnimplementedReplicationServer() {}
func (UnimplementedReplicationServer) testEmbeddedByValue()                     {}

// UnsafeReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationServer will
// result in compilation errors.
type UnsafeReplicationServer interface {
	mustEmbedUnimplementedReplicationServer()
}

func RegisterReplicationServer(s grpc.ServiceRegistrar, srv ReplicationServer) {
	// If the following call pancis, it indicates UnimplementedReplicationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Replication_ServiceDesc, srv)
}

func _Replication_RequestAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestAsk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestAsk(ctx, req.(*RequestFiles))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RequestSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestSend(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RequestCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestCreate(ctx, req.(*CreateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RequestReplicaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestReplicaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestReplicaCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestReplicaCreate(ctx, req.(*CreateData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RequestGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestGet(ctx, req.(*GetData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replication_RequestAppend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServer).RequestAppend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Replication_RequestAppend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServer).RequestAppend(ctx, req.(*AppendData))
	}
	return interceptor(ctx, in, info, handler)
}

// Replication_ServiceDesc is the grpc.ServiceDesc for Replication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Replication",
	HandlerType: (*ReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestAsk",
			Handler:    _Replication_RequestAsk_Handler,
		},
		{
			MethodName: "RequestSend",
			Handler:    _Replication_RequestSend_Handler,
		},
		{
			MethodName: "RequestCreate",
			Handler:    _Replication_RequestCreate_Handler,
		},
		{
			MethodName: "RequestReplicaCreate",
			Handler:    _Replication_RequestReplicaCreate_Handler,
		},
		{
			MethodName: "RequestGet",
			Handler:    _Replication_RequestGet_Handler,
		},
		{
			MethodName: "RequestAppend",
			Handler:    _Replication_RequestAppend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hydfs/repl/repl.proto",
}
